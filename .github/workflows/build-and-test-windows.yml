name: Build for Windows

on: [push, pull_request]

jobs:
  build-windows:
    name: windows ${{ join(matrix.*, ' ') }}
    env:
      OPTS: --with-vstudiotarget=${{ matrix.target }} ${{ matrix.opts }}
      TESTSUITE: ${{ matrix.testsuite }}
    
    runs-on: windows-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # run only one job for windows, as more than one be enough currently to verify
          # PRs
          # tests are not enabled as they take very long and a lot of them will fail          
          - target: Release
          
    defaults:
      run:
         shell: msys2 {0}         
         
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: install msys 
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          release: false
          update: true
          install: base-devel git mingw-w64-ucrt-x86_64-toolchain autotools         
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  

      # pypiwin32 has to be installed with a Windows python version therefore
      # this step will configure python first on Windows and exports
      # its location for MSYS bash.  
      - name: configure python in Windows cmdline
        shell: cmd
        run: |
            python -m pip install --upgrade pip
            pip install pypiwin32
            
            echo Python location: %pythonLocation%
            echo export pythonLocation="%pythonLocation%" > c:\msys64\home\%USERNAME%\.pythonenv.sh
            echo export PYTHONPATH="%cd%\python;%cd%\ovs\python;%pythonLocation%\Lib;%pythonLocation%\DLLs;%pythonLocation%\Lib\lib-tk" >> c:\msys64\home\%USERNAME%\.pythonenv.sh
            echo ".pythonenv.sh was generated in c:\msys64\home\%USERNAME%"
      - name: install openssl
        shell: powershell
        run: | 
            $RUNNER_TEMP = $env:RUNNER_TEMP
            $ProgressPreference = 'SilentlyContinue'

            Remove-Item -Recurse -Force -Path C:/OpenSSL-Win64 -ErrorAction Continue
            New-Item -ItemType Directory -Force -Path "$RUNNER_TEMP\ovs-build-downloads"
        
            # Find and download the latest stable OpenSSl 3.0.
            $URL = "https://raw.githubusercontent.com/slproweb/opensslhashes/master/win32_openssl_hashes.json"
            $webData = (Invoke-WebRequest -Uri $URL).content | ConvertFrom-Json
            $source = ($webData.files.PSObject.Properties | Where-Object {
                $_.Value.basever   -match "^3\.0\.[0-9]+" -and
                $_.Value.bits      -eq    "64"            -and
                $_.Value.arch      -eq    "INTEL"         -and
                $_.Value.installer -eq    "exe"           -and
                -not $_.Value.light
            } | Select-Object Value | Select -First 1).PSObject.Properties.Value
        
            Write-Host "Latest OpenSSL 3.0:" ($source | Format-List | Out-String)
        
            $destination = "$RUNNER_TEMP\ovs-build-downloads\Win64OpenSSL.exe"
            if (Test-Path $destination) {
                $fileHash = (Get-FileHash $destination -Algorithm SHA256).Hash.ToLower()
                if ($fileHash -ne $source.sha256) {
                    Write-Host "Cache miss:" $fileHash "!=" $source.sha256
                    Remove-Item -Path $destination
                }
            }
        
            if (Test-Path $destination) {
                Write-Host "Using cached:" $destination
            } else {
                Write-Host "Downloading:" $source.url
                Invoke-WebRequest $source.url -OutFile $destination
            }
        
            Write-Host "Installing:" $destination
            Start-Process -FilePath $destination -ArgumentList "/silent /verysilent /sp- /suppressmsgboxes /DIR=C:\OpenSSL-Win64"  -Wait 
            get-item -Path "C:\OpenSSL-Win64"
      - name: clone pthread
        shell: cmd
        run: git clone -q https://git.code.sf.net/p/pthreads4w/code c:\pthreads4w-code
      
      - name: disable link in MSYS
        run: |
          mv $(which link) $(which link)_copy
          mv /ucrt64/bin/python3 /ucrt64/bin/python3_off
      - name: build pthread  
        shell: cmd
        run: |
          @call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" 
          c:\MSYS64\msys2_shell.cmd -ucrt64 -here -defterm -no-start -use-full-path -c "cd /c/pthreads4w-code && nmake all install 2>&1"             
      - name: generate build script
        run: |
          cat > $RUNNER_TEMP/build.sh <<EOF
          #!/bin/bash
          set -e
            source ~/.pythonenv.sh
            pushd ovs
            ./boot.sh
            ./configure CC=build-aux/cccl LD="\`which link\`" \
                LIBS="-lws2_32 -lShlwapi -liphlpapi -lwbemuuid -lole32 -loleaut32" \
                --prefix=C:/openvswitch/usr \
                --localstatedir=C:/ProgramData/openvswitch/var \
                --sysconfdir=C:/ProgramData/openvswitch/etc \
                --with-pthread=c:/PTHREADS-BUILT/ \
                --enable-ssl --with-openssl=C:/OpenSSL-Win64 \
                -with-vstudiotargetver=Win10 \
                $OPTS
                
            make -j4
            make install

            popd

            ./boot.sh
            ./configure CC=build-aux/cccl LD="\`which link\`" \
                LIBS="-lws2_32 -lShlwapi -liphlpapi -lwbemuuid -lole32 -loleaut32" \
                --prefix=C:/openvswitch/usr \
                --localstatedir=C:/ProgramData/openvswitch/var \
                --sysconfdir=C:/ProgramData/openvswitch/etc \
                --with-pthread=c:/PTHREADS-BUILT/ \
                --enable-ssl --with-openssl=C:/OpenSSL-Win64 \
                $OPTS
                
            make -j4
            make install
                
          EOF
          chmod +x $RUNNER_TEMP/build.sh 
          cat $RUNNER_TEMP/build.sh 
      - name: build
        shell: cmd     
        run: |
          @call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" 
          c:\MSYS64\msys2_shell.cmd -ucrt64 -here -defterm -no-start -use-full-path -c "$RUNNER_TEMP/build.sh 2>&1"    
      - name: upload ovs logs on failure
        if: failure()
        uses: actions/upload-artifact@v4.6.1
        with:
          name: logs-windows-${{ join(matrix.*, '-') }}
          if-no-files-found: ignore
          path: ./ovs/config.log
          
      - name: upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4.6.1
        with:
          name: logs-windows-${{ join(matrix.*, '-') }}
          if-no-files-found: ignore
          path: ./config.log
          
      - name: package
        run: |
          cp /c/PTHREADS-BUILT/bin/pthreadVC3.dll /C/openvswitch/usr/sbin
          cp /c/PTHREADS-BUILT/bin/pthreadVC3.dll /C/openvswitch/usr/bin
          cp /c/PTHREADS-BUILT/bin/pthreadVC3.dll /C/openvswitch/usr/sbin
          cp /c/PTHREADS-BUILT/bin/pthreadVC3.dll /C/openvswitch/usr/bin
          cp /c/OpenSSL-Win64/libcrypto-3-x64.dll" /C/openvswitch/usr/sbin
          cp /c/OpenSSL-Win64/libcrypto-3-x64.dll" /C/openvswitch/usr/bin
          cp /c/OpenSSL-Win64/libssl-3-x64.dll" /C/openvswitch/usr/sbin
          cp /c/OpenSSL-Win64/libssl-3-x64.dll /C/openvswitch/usr/bin
          mkdir /C/openvswitch/driver
          cp ./ovs/datapath-windows/x64/Win10${{ matrix.target }}/package/* /C/openvswitch/driver
          cp ./ovs/datapath-windows/x64/Win10${{ matrix.target }}/package.cer /C/openvswitch/driver
          cp ./ovs/datapath-windows/misc/* /C/openvswitch/driver
          cp ./ovs/datapath-windows/ovsext/x64/Win10${{ matrix.target }}/DBO_OVSE.pdb /C/openvswitch/driver
          mv /C/openvswitch/driver/ovsext.inf /C/openvswitch/driver/DBO_OVSE.inf
      - name: upload build artifacts
        uses: actions/upload-artifact@v4.6.1
        with:
          name: ovn-windows-${{ join(matrix.*, '-') }}
          path: c:\openvswitch
